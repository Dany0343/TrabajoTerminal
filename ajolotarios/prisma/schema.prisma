generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// Usuarios y roles
model User {
  id          Int         @id @default(autoincrement())
  firstName   String      @db.VarChar(50)
  lastName    String      @db.VarChar(50)
  email       String      @unique @db.VarChar(100)
  password    String
  role        Role        @default(AJOLATORY_SUBSCRIBER)
  phone       String      @db.VarChar(20)
  ajolotaries Ajolotary[]
  // createdBy     Int?
  // creator       User?       @relation("UserCreator", fields: [createdBy], references: [id])
  // createdUsers  User[]      @relation("UserCreator")
  Alert       Alert[]
}

enum Role {
  SUPER_ADMIN
  AJOLATORY_ADMIN
  AJOLATORY_SUBSCRIBER
}

// Gestión de instalaciones
model Ajolotary {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(100)
  location     String
  description  String  @db.Text
  permitNumber String  @db.VarChar(50)
  active       Boolean @default(true)
  users        User[]
  tanks        Tank[]
}

model Tank {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(50)
  capacity     Decimal    @db.Decimal(10, 2)
  observations String     @db.Text
  status       TankStatus @default(ACTIVE)
  ajolotaryId  Int
  ajolotary    Ajolotary  @relation(fields: [ajolotaryId], references: [id], onDelete: Cascade)
  devices      Device[]
  axolotls     Axolotl[]
}

enum TankStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  QUARANTINE
}

// Modelo de Tipo de Sensor
model SensorType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  magnitude String    @db.VarChar(50)
  sensors   Sensor[]
}

// enum de Estado de Sensor
enum SensorStatus {
  ACTIVE
  INACTIVE
}

// Modelo de Sensor
model Sensor {
  id                Int             @id @default(autoincrement())
  model             String          @db.VarChar(50)
  serialNumber      String          @unique @db.VarChar(50)
  lastConnection    DateTime        @default(now())
  typeId            Int
  deviceId          Int
  calibratedAt      DateTime        @default(now())
  device            Device          @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  type              SensorType      @relation(fields: [typeId], references: [id])
  status            SensorStatus    @default(ACTIVE)
  measurements      Measurement[]
}

// Modelo de Dispositivo
model Device {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(50)
  serialNumber String          @unique @db.VarChar(50)
  status       DeviceStatus    @default(ACTIVE)
  tankId       Int
  tank         Tank            @relation(fields: [tankId], references: [id], onDelete: Cascade)
  sensors      Sensor[]
  measurements Measurement[]
}

// Enums
enum DeviceStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

// Modelo de Medición
model Measurement {
  id         Int                    @id @default(autoincrement())
  dateTime   DateTime               @default(now())
  deviceId   Int
  sensorId   Int
  device     Device                 @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  sensor     Sensor                 @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  alerts     Alert[]
  parameters MeasurementParameter[]
  isValid    Boolean                @default(true)
}

// Modelo de Parámetros de Medición
model MeasurementParameter {
  id            Int         @id @default(autoincrement())
  measurementId Int
  parameterId   Int
  value         Decimal     @db.Decimal(10, 2)
  measurement   Measurement @relation(fields: [measurementId], references: [id], onDelete: Cascade)
  parameter     Parameter   @relation(fields: [parameterId], references: [id])
}

// Modelo de Parámetro
model Parameter {
  id               Int                    @id @default(autoincrement())
  name             String                 @db.VarChar(50)
  description      String?                @db.Text
  measurementRules MeasurementRule[]
  measurements     MeasurementParameter[]
}


// Gestión de ajolotes
model Axolotl {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(50)
  species      String       @db.VarChar(50)
  age          Int
  health       HealthStatus
  size         Decimal      @db.Decimal(10, 2)
  weight       Decimal      @db.Decimal(10, 2)
  stage        LifeStage
  tankId       Int
  tank         Tank         @relation(fields: [tankId], references: [id], onDelete: Cascade)
  observations String[]
}

enum HealthStatus {
  HEALTHY
  SICK
  CRITICAL
  RECOVERING
  QUARANTINE
}

enum LifeStage {
  EGG
  LARVAE
  JUVENILE
  ADULT
  BREEDING
}

// Sistema de alertas
model Alert {
  id            Int         @id @default(autoincrement())
  measurementId Int
  alertType     AlertType
  description   String      @db.Text
  priority      Priority
  status        AlertStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  resolvedAt    DateTime?
  resolvedBy    Int?
  notes         String?
  measurement   Measurement @relation(fields: [measurementId], references: [id], onDelete: Cascade)
  resolver      User?       @relation(fields: [resolvedBy], references: [id])
}

enum AlertType {
  PARAMETER_OUT_OF_RANGE
  DEVICE_MALFUNCTION
  MAINTENANCE_REQUIRED
  SYSTEM_ERROR
  CALIBRATION_NEEDED
  HEALTH_ISSUE
}

enum AlertStatus {
  PENDING
  ACKNOWLEDGED
  RESOLVED
  ESCALATED
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

// Reglas de medición
model MeasurementRule {
  id          Int       @id @default(autoincrement())
  optimalMin  Decimal   @db.Decimal(10, 2)
  optimalMax  Decimal   @db.Decimal(10, 2)
  warningMin  Decimal   @db.Decimal(10, 2)
  warningMax  Decimal   @db.Decimal(10, 2)
  criticalMin Decimal   @db.Decimal(10, 2)
  criticalMax Decimal   @db.Decimal(10, 2)
  action      String    @db.Text
  parameterId Int
  parameter   Parameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  active      Boolean   @default(true)
}
